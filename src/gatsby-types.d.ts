/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  /** Returns the first child node of type SocialsYaml or null if there are no children of given type on this node */
  readonly childSocialsYaml: Maybe<SocialsYaml>;
  /** Returns the first child node of type TeamYaml or null if there are no children of given type on this node */
  readonly childTeamYaml: Maybe<TeamYaml>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  /** Returns all children nodes filtered by type SocialsYaml */
  readonly childrenSocialsYaml: Maybe<ReadonlyArray<Maybe<SocialsYaml>>>;
  /** Returns all children nodes filtered by type TeamYaml */
  readonly childrenTeamYaml: Maybe<ReadonlyArray<Maybe<TeamYaml>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly childSocialsYaml: InputMaybe<SocialsYamlFieldSelector>;
  readonly childTeamYaml: InputMaybe<TeamYamlFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly childrenSocialsYaml: InputMaybe<SocialsYamlFieldSelector>;
  readonly childrenTeamYaml: InputMaybe<TeamYamlFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly childSocialsYaml: InputMaybe<SocialsYamlFilterInput>;
  readonly childTeamYaml: InputMaybe<TeamYamlFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly childrenSocialsYaml: InputMaybe<SocialsYamlFilterListInput>;
  readonly childrenTeamYaml: InputMaybe<TeamYamlFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly childSocialsYaml: InputMaybe<SocialsYamlSortInput>;
  readonly childTeamYaml: InputMaybe<TeamYamlSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly childrenSocialsYaml: InputMaybe<SocialsYamlSortInput>;
  readonly childrenTeamYaml: InputMaybe<TeamYamlSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly fileAbsolutePath: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly button: Maybe<MarkdownRemarkFrontmatterButton>;
  readonly columns: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterColumns>>>;
  readonly ecosystemSection: Maybe<MarkdownRemarkFrontmatterEcosystemSection>;
  readonly followUsSection: Maybe<MarkdownRemarkFrontmatterFollowUsSection>;
  readonly gettingStarted: Maybe<MarkdownRemarkFrontmatterGettingStarted>;
  readonly hackathonInfo: Maybe<MarkdownRemarkFrontmatterHackathonInfo>;
  readonly headerLandingSection: Maybe<MarkdownRemarkFrontmatterHeaderLandingSection>;
  readonly headerSection: Maybe<MarkdownRemarkFrontmatterHeaderSection>;
  readonly introSection: Maybe<MarkdownRemarkFrontmatterIntroSection>;
  readonly menuItems: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterMenuItems>>>;
  readonly milestonesSection: Maybe<MarkdownRemarkFrontmatterMilestonesSection>;
  readonly numbersSection: Maybe<MarkdownRemarkFrontmatterNumbersSection>;
  readonly rulesAndJudging: Maybe<MarkdownRemarkFrontmatterRulesAndJudging>;
  readonly shopSection: Maybe<MarkdownRemarkFrontmatterShopSection>;
  readonly socialIcons: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly technologySection: Maybe<MarkdownRemarkFrontmatterTechnologySection>;
  readonly title: Maybe<Scalars['String']>;
  readonly todoListSection: Maybe<MarkdownRemarkFrontmatterTodoListSection>;
  readonly topBanner: Maybe<MarkdownRemarkFrontmatterTopBanner>;
  readonly walletsSection: Maybe<MarkdownRemarkFrontmatterWalletsSection>;
};

type MarkdownRemarkFrontmatterButton = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterButtonFieldSelector = {
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterButtonFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterButtonSortInput = {
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterColumns = {
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterColumnsLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterColumnsFieldSelector = {
  readonly links: InputMaybe<MarkdownRemarkFrontmatterColumnsLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterColumnsFilterInput = {
  readonly links: InputMaybe<MarkdownRemarkFrontmatterColumnsLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterColumnsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterColumnsFilterInput>;
};

type MarkdownRemarkFrontmatterColumnsLinks = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterColumnsLinksFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterColumnsLinksFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterColumnsLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterColumnsLinksFilterInput>;
};

type MarkdownRemarkFrontmatterColumnsLinksSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterColumnsSortInput = {
  readonly links: InputMaybe<MarkdownRemarkFrontmatterColumnsLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSection = {
  readonly subsections: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterEcosystemSectionSubsections>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterEcosystemSectionFieldSelector = {
  readonly subsections: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSectionFilterInput = {
  readonly subsections: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFilterListInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSortInput = {
  readonly subsections: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsections = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly items: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItems>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly items: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly items: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsFilterInput>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItems = {
  readonly logo: Maybe<File>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFieldSelector = {
  readonly logo: InputMaybe<FileFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFilterInput = {
  readonly logo: InputMaybe<FileFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsFilterInput>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsSortInput = {
  readonly logo: InputMaybe<FileSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterEcosystemSectionSubsectionsSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly items: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSubsectionsItemsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly button: InputMaybe<MarkdownRemarkFrontmatterButtonFieldSelector>;
  readonly columns: InputMaybe<MarkdownRemarkFrontmatterColumnsFieldSelector>;
  readonly ecosystemSection: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionFieldSelector>;
  readonly followUsSection: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionFieldSelector>;
  readonly gettingStarted: InputMaybe<MarkdownRemarkFrontmatterGettingStartedFieldSelector>;
  readonly hackathonInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoFieldSelector>;
  readonly headerLandingSection: InputMaybe<MarkdownRemarkFrontmatterHeaderLandingSectionFieldSelector>;
  readonly headerSection: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionFieldSelector>;
  readonly introSection: InputMaybe<MarkdownRemarkFrontmatterIntroSectionFieldSelector>;
  readonly menuItems: InputMaybe<MarkdownRemarkFrontmatterMenuItemsFieldSelector>;
  readonly milestonesSection: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionFieldSelector>;
  readonly numbersSection: InputMaybe<MarkdownRemarkFrontmatterNumbersSectionFieldSelector>;
  readonly rulesAndJudging: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingFieldSelector>;
  readonly shopSection: InputMaybe<MarkdownRemarkFrontmatterShopSectionFieldSelector>;
  readonly socialIcons: InputMaybe<FieldSelectorEnum>;
  readonly technologySection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly todoListSection: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionFieldSelector>;
  readonly topBanner: InputMaybe<MarkdownRemarkFrontmatterTopBannerFieldSelector>;
  readonly walletsSection: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionFieldSelector>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly button: InputMaybe<MarkdownRemarkFrontmatterButtonFilterInput>;
  readonly columns: InputMaybe<MarkdownRemarkFrontmatterColumnsFilterListInput>;
  readonly ecosystemSection: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionFilterInput>;
  readonly followUsSection: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionFilterInput>;
  readonly gettingStarted: InputMaybe<MarkdownRemarkFrontmatterGettingStartedFilterInput>;
  readonly hackathonInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoFilterInput>;
  readonly headerLandingSection: InputMaybe<MarkdownRemarkFrontmatterHeaderLandingSectionFilterInput>;
  readonly headerSection: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionFilterInput>;
  readonly introSection: InputMaybe<MarkdownRemarkFrontmatterIntroSectionFilterInput>;
  readonly menuItems: InputMaybe<MarkdownRemarkFrontmatterMenuItemsFilterListInput>;
  readonly milestonesSection: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionFilterInput>;
  readonly numbersSection: InputMaybe<MarkdownRemarkFrontmatterNumbersSectionFilterInput>;
  readonly rulesAndJudging: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingFilterInput>;
  readonly shopSection: InputMaybe<MarkdownRemarkFrontmatterShopSectionFilterInput>;
  readonly socialIcons: InputMaybe<StringQueryOperatorInput>;
  readonly technologySection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly todoListSection: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionFilterInput>;
  readonly topBanner: InputMaybe<MarkdownRemarkFrontmatterTopBannerFilterInput>;
  readonly walletsSection: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionFilterInput>;
};

type MarkdownRemarkFrontmatterFollowUsSection = {
  readonly description: Maybe<Scalars['String']>;
  readonly socialMediaLinks: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinks>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFollowUsSectionFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly socialMediaLinks: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFollowUsSectionFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly socialMediaLinks: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFilterListInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinks = {
  readonly name: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksFilterInput>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterFollowUsSectionSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly socialMediaLinks: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionSocialMediaLinksSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterGettingStarted = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterGettingStartedFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterGettingStartedFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterGettingStartedSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfo = {
  readonly ideasAndTracks: Maybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracks>;
  readonly participantsInfo: Maybe<MarkdownRemarkFrontmatterHackathonInfoParticipantsInfo>;
  readonly prerequisites: Maybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisites>;
  readonly prizes: Maybe<MarkdownRemarkFrontmatterHackathonInfoPrizes>;
  readonly schedule: Maybe<MarkdownRemarkFrontmatterHackathonInfoSchedule>;
};

type MarkdownRemarkFrontmatterHackathonInfoFieldSelector = {
  readonly ideasAndTracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksFieldSelector>;
  readonly participantsInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoFieldSelector>;
  readonly prerequisites: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesFieldSelector>;
  readonly prizes: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesFieldSelector>;
  readonly schedule: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleFieldSelector>;
};

type MarkdownRemarkFrontmatterHackathonInfoFilterInput = {
  readonly ideasAndTracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksFilterInput>;
  readonly participantsInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoFilterInput>;
  readonly prerequisites: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesFilterInput>;
  readonly prizes: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesFilterInput>;
  readonly schedule: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleFilterInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracks = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly tracks: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracks>>>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly tracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFieldSelector>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly tracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFilterListInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly tracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksSortInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracks = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksFilterInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksTracksSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoParticipantsInfo = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisites = {
  readonly description: Maybe<Scalars['String']>;
  readonly link: Maybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLink>;
  readonly skills: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkFieldSelector>;
  readonly skills: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkFilterInput>;
  readonly skills: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLink = {
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrerequisitesSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesLinkSortInput>;
  readonly skills: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizes = {
  readonly description: Maybe<Scalars['String']>;
  readonly prizeList: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeList>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly prizeList: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly prizeList: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeList = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListFilterInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoPrizesSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly prizeList: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesPrizeListSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoSchedule = {
  readonly description: Maybe<Scalars['String']>;
  readonly events: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterHackathonInfoScheduleEvents>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleEvents = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFilterInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleEventsSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly events: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly events: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleEventsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHackathonInfoScheduleSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly events: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleEventsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHackathonInfoSortInput = {
  readonly ideasAndTracks: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoIdeasAndTracksSortInput>;
  readonly participantsInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoParticipantsInfoSortInput>;
  readonly prerequisites: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrerequisitesSortInput>;
  readonly prizes: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoPrizesSortInput>;
  readonly schedule: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoScheduleSortInput>;
};

type MarkdownRemarkFrontmatterHeaderLandingSection = {
  readonly date: Maybe<Scalars['String']>;
  readonly tagline: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeaderLandingSectionFieldSelector = {
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly tagline: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHeaderLandingSectionFilterInput = {
  readonly date: InputMaybe<StringQueryOperatorInput>;
  readonly tagline: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeaderLandingSectionSortInput = {
  readonly date: InputMaybe<SortOrderEnum>;
  readonly tagline: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHeaderSection = {
  readonly dark: Maybe<MarkdownRemarkFrontmatterHeaderSectionDark>;
  readonly light: Maybe<MarkdownRemarkFrontmatterHeaderSectionLight>;
};

type MarkdownRemarkFrontmatterHeaderSectionDark = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeaderSectionDarkFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHeaderSectionDarkFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeaderSectionDarkSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHeaderSectionFieldSelector = {
  readonly dark: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionDarkFieldSelector>;
  readonly light: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionLightFieldSelector>;
};

type MarkdownRemarkFrontmatterHeaderSectionFilterInput = {
  readonly dark: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionDarkFilterInput>;
  readonly light: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionLightFilterInput>;
};

type MarkdownRemarkFrontmatterHeaderSectionLight = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeaderSectionLightFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHeaderSectionLightFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeaderSectionLightSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHeaderSectionSortInput = {
  readonly dark: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionDarkSortInput>;
  readonly light: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionLightSortInput>;
};

type MarkdownRemarkFrontmatterIntroSection = {
  readonly cards: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterIntroSectionCards>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterIntroSectionCards = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly link: Maybe<MarkdownRemarkFrontmatterIntroSectionCardsLink>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsLinkFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsLinkFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsFilterInput>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsLink = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsLinkFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsLinkFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsLinkSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterIntroSectionCardsSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsLinkSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterIntroSectionFieldSelector = {
  readonly cards: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterIntroSectionFilterInput = {
  readonly cards: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterIntroSectionSortInput = {
  readonly cards: InputMaybe<MarkdownRemarkFrontmatterIntroSectionCardsSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterMenuItems = {
  readonly items: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterMenuItemsItems>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterMenuItemsFieldSelector = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterMenuItemsItemsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterMenuItemsFilterInput = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterMenuItemsItemsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMenuItemsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterMenuItemsFilterInput>;
};

type MarkdownRemarkFrontmatterMenuItemsItems = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterMenuItemsItemsFieldSelector = {
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterMenuItemsItemsFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMenuItemsItemsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterMenuItemsItemsFilterInput>;
};

type MarkdownRemarkFrontmatterMenuItemsItemsSortInput = {
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterMenuItemsSortInput = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterMenuItemsItemsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSection = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly timelines: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterMilestonesSectionTimelines>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterMilestonesSectionFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly timelines: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSectionFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly timelines: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly timelines: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelines = {
  readonly title: Maybe<Scalars['String']>;
  readonly years: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYears>>>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly years: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFieldSelector>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly years: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFilterListInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesFilterInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
  readonly years: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsSortInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYears = {
  readonly entries: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntries>>>;
  readonly year: Maybe<Scalars['Int']>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntries = {
  readonly content: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly isMajor: Maybe<Scalars['Boolean']>;
  readonly row: Maybe<Scalars['Int']>;
  readonly text: Maybe<Scalars['String']>;
  readonly when: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly isMajor: InputMaybe<FieldSelectorEnum>;
  readonly row: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly when: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly isMajor: InputMaybe<BooleanQueryOperatorInput>;
  readonly row: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly when: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFilterInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly isMajor: InputMaybe<SortOrderEnum>;
  readonly row: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly when: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFieldSelector = {
  readonly entries: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFieldSelector>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFilterInput = {
  readonly entries: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesFilterListInput>;
  readonly year: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsFilterInput>;
};

type MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsSortInput = {
  readonly entries: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionTimelinesYearsEntriesSortInput>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterNumbersSection = {
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterNumbersSectionFieldSelector = {
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterNumbersSectionFilterInput = {
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterNumbersSectionSortInput = {
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudging = {
  readonly criteria: Maybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteria>;
  readonly jury: Maybe<MarkdownRemarkFrontmatterRulesAndJudgingJury>;
  readonly rules: Maybe<MarkdownRemarkFrontmatterRulesAndJudgingRules>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteria = {
  readonly criteriumList: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumList>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumList = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFilterInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaFieldSelector = {
  readonly criteriumList: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaFilterInput = {
  readonly criteriumList: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingCriteriaSortInput = {
  readonly criteriumList: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaCriteriumListSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingFieldSelector = {
  readonly criteria: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaFieldSelector>;
  readonly jury: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryFieldSelector>;
  readonly rules: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingRulesFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingFilterInput = {
  readonly criteria: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaFilterInput>;
  readonly jury: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryFilterInput>;
  readonly rules: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingRulesFilterInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJury = {
  readonly description: Maybe<Scalars['String']>;
  readonly people: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryPeople>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly people: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly people: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryPeople = {
  readonly name: Maybe<Scalars['String']>;
  readonly picture: Maybe<File>;
  readonly role: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly picture: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly picture: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleFilterInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly picture: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingJurySortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly people: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJuryPeopleSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingRules = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingRulesFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingRulesFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingRulesSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterRulesAndJudgingSortInput = {
  readonly criteria: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingCriteriaSortInput>;
  readonly jury: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingJurySortInput>;
  readonly rules: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingRulesSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterShopSection = {
  readonly description: Maybe<Scalars['String']>;
  readonly link: Maybe<MarkdownRemarkFrontmatterShopSectionLink>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterShopSectionFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterShopSectionLinkFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterShopSectionFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterShopSectionLinkFilterInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterShopSectionLink = {
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterShopSectionLinkFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterShopSectionLinkFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterShopSectionLinkSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterShopSectionSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<MarkdownRemarkFrontmatterShopSectionLinkSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly button: InputMaybe<MarkdownRemarkFrontmatterButtonSortInput>;
  readonly columns: InputMaybe<MarkdownRemarkFrontmatterColumnsSortInput>;
  readonly ecosystemSection: InputMaybe<MarkdownRemarkFrontmatterEcosystemSectionSortInput>;
  readonly followUsSection: InputMaybe<MarkdownRemarkFrontmatterFollowUsSectionSortInput>;
  readonly gettingStarted: InputMaybe<MarkdownRemarkFrontmatterGettingStartedSortInput>;
  readonly hackathonInfo: InputMaybe<MarkdownRemarkFrontmatterHackathonInfoSortInput>;
  readonly headerLandingSection: InputMaybe<MarkdownRemarkFrontmatterHeaderLandingSectionSortInput>;
  readonly headerSection: InputMaybe<MarkdownRemarkFrontmatterHeaderSectionSortInput>;
  readonly introSection: InputMaybe<MarkdownRemarkFrontmatterIntroSectionSortInput>;
  readonly menuItems: InputMaybe<MarkdownRemarkFrontmatterMenuItemsSortInput>;
  readonly milestonesSection: InputMaybe<MarkdownRemarkFrontmatterMilestonesSectionSortInput>;
  readonly numbersSection: InputMaybe<MarkdownRemarkFrontmatterNumbersSectionSortInput>;
  readonly rulesAndJudging: InputMaybe<MarkdownRemarkFrontmatterRulesAndJudgingSortInput>;
  readonly shopSection: InputMaybe<MarkdownRemarkFrontmatterShopSectionSortInput>;
  readonly socialIcons: InputMaybe<SortOrderEnum>;
  readonly technologySection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly todoListSection: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionSortInput>;
  readonly topBanner: InputMaybe<MarkdownRemarkFrontmatterTopBannerSortInput>;
  readonly walletsSection: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionSortInput>;
};

type MarkdownRemarkFrontmatterTechnologySection = {
  readonly blockFlowSection: Maybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSection>;
  readonly polwSection: Maybe<MarkdownRemarkFrontmatterTechnologySectionPolwSection>;
  readonly smartContractSection: Maybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSection>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly vmsSection: Maybe<MarkdownRemarkFrontmatterTechnologySectionVmsSection>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSection = {
  readonly cardText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionFieldSelector = {
  readonly cardText: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionFilterInput = {
  readonly cardText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinks = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksFilterInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionSortInput = {
  readonly cardText: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionFieldSelector = {
  readonly blockFlowSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionFieldSelector>;
  readonly polwSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionFieldSelector>;
  readonly smartContractSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly vmsSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionFieldSelector>;
};

type MarkdownRemarkFrontmatterTechnologySectionFilterInput = {
  readonly blockFlowSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionFilterInput>;
  readonly polwSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionFilterInput>;
  readonly smartContractSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionFilterInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly vmsSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionFilterInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSection = {
  readonly cardText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionFieldSelector = {
  readonly cardText: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionFilterInput = {
  readonly cardText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinks = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksFilterInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionPolwSectionSortInput = {
  readonly cardText: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSection = {
  readonly cardText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionFieldSelector = {
  readonly cardText: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionFilterInput = {
  readonly cardText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinks = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksFilterInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionSortInput = {
  readonly cardText: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionSortInput = {
  readonly blockFlowSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionBlockFlowSectionSortInput>;
  readonly polwSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionPolwSectionSortInput>;
  readonly smartContractSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionSmartContractSectionSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly vmsSection: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionSortInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSection = {
  readonly cardText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinks>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionFieldSelector = {
  readonly cardText: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionFilterInput = {
  readonly cardText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinks = {
  readonly newTab: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFieldSelector = {
  readonly newTab: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFilterInput = {
  readonly newTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksFilterInput>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksSortInput = {
  readonly newTab: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTechnologySectionVmsSectionSortInput = {
  readonly cardText: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterTechnologySectionVmsSectionLinksSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTodoListSection = {
  readonly lists: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTodoListSectionLists>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTodoListSectionFieldSelector = {
  readonly lists: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTodoListSectionFilterInput = {
  readonly lists: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsFilterListInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTodoListSectionLists = {
  readonly items: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTodoListSectionListsItems>>>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsFieldSelector = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsItemsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsFilterInput = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsItemsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsFilterInput>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsItems = {
  readonly description: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsItemsFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsItemsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsItemsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsItemsFilterInput>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsItemsSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTodoListSectionListsSortInput = {
  readonly items: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsItemsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTodoListSectionSortInput = {
  readonly lists: InputMaybe<MarkdownRemarkFrontmatterTodoListSectionListsSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTopBanner = {
  readonly color: Maybe<Scalars['String']>;
  readonly linkText: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTopBannerFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly linkText: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTopBannerFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly linkText: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTopBannerSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly linkText: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterWalletsSection = {
  readonly description: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly wallets: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterWalletsSectionWallets>>>;
};

type MarkdownRemarkFrontmatterWalletsSectionFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly wallets: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsFieldSelector>;
};

type MarkdownRemarkFrontmatterWalletsSectionFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly wallets: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsFilterListInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly wallets: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsSortInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionWallets = {
  readonly actions: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterWalletsSectionWalletsActions>>>;
  readonly color: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly screenshot: Maybe<File>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsActions = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFieldSelector = {
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFilterInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsActionsSortInput = {
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsFieldSelector = {
  readonly actions: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFieldSelector>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly screenshot: InputMaybe<FileFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsFilterInput = {
  readonly actions: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsActionsFilterListInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly screenshot: InputMaybe<FileFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsFilterInput>;
};

type MarkdownRemarkFrontmatterWalletsSectionWalletsSortInput = {
  readonly actions: InputMaybe<MarkdownRemarkFrontmatterWalletsSectionWalletsActionsSortInput>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly screenshot: InputMaybe<FileSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly fileAbsolutePath: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allSocialsYaml: SocialsYamlConnection;
  readonly allTeamYaml: TeamYamlConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly socialsYaml: Maybe<SocialsYaml>;
  readonly teamYaml: Maybe<TeamYaml>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allSocialsYamlArgs = {
  filter: InputMaybe<SocialsYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SocialsYamlSortInput>>>;
};


type Query_allTeamYamlArgs = {
  filter: InputMaybe<TeamYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<TeamYamlSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  childSocialsYaml: InputMaybe<SocialsYamlFilterInput>;
  childTeamYaml: InputMaybe<TeamYamlFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  childrenSocialsYaml: InputMaybe<SocialsYamlFilterListInput>;
  childrenTeamYaml: InputMaybe<TeamYamlFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_socialsYamlArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_teamYamlArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<FileFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly social: Maybe<SiteSiteMetadataSocial>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly social: InputMaybe<SiteSiteMetadataSocialFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly social: InputMaybe<SiteSiteMetadataSocialFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSocial = {
  readonly twitter: Maybe<Scalars['String']>;
};

type SiteSiteMetadataSocialFieldSelector = {
  readonly twitter: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataSocialFilterInput = {
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSocialSortInput = {
  readonly twitter: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly social: InputMaybe<SiteSiteMetadataSocialSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SocialsYaml = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly url: Maybe<Scalars['String']>;
};

type SocialsYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SocialsYamlEdge>;
  readonly group: ReadonlyArray<SocialsYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SocialsYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SocialsYamlConnection_distinctArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlConnection_groupArgs = {
  field: SocialsYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SocialsYamlConnection_maxArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlConnection_minArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlConnection_sumArgs = {
  field: SocialsYamlFieldSelector;
};

type SocialsYamlEdge = {
  readonly next: Maybe<SocialsYaml>;
  readonly node: SocialsYaml;
  readonly previous: Maybe<SocialsYaml>;
};

type SocialsYamlFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SocialsYamlFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SocialsYamlFilterListInput = {
  readonly elemMatch: InputMaybe<SocialsYamlFilterInput>;
};

type SocialsYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SocialsYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SocialsYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SocialsYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SocialsYamlGroupConnection_distinctArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlGroupConnection_groupArgs = {
  field: SocialsYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SocialsYamlGroupConnection_maxArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlGroupConnection_minArgs = {
  field: SocialsYamlFieldSelector;
};


type SocialsYamlGroupConnection_sumArgs = {
  field: SocialsYamlFieldSelector;
};

type SocialsYamlSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TeamYaml = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<File>;
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly role: Maybe<Scalars['String']>;
};

type TeamYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamYamlEdge>;
  readonly group: ReadonlyArray<TeamYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamYamlConnection_distinctArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlConnection_groupArgs = {
  field: TeamYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamYamlConnection_maxArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlConnection_minArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlConnection_sumArgs = {
  field: TeamYamlFieldSelector;
};

type TeamYamlEdge = {
  readonly next: Maybe<TeamYaml>;
  readonly node: TeamYaml;
  readonly previous: Maybe<TeamYaml>;
};

type TeamYamlFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
};

type TeamYamlFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
};

type TeamYamlFilterListInput = {
  readonly elemMatch: InputMaybe<TeamYamlFilterInput>;
};

type TeamYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TeamYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamYamlGroupConnection_distinctArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlGroupConnection_groupArgs = {
  field: TeamYamlFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamYamlGroupConnection_maxArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlGroupConnection_minArgs = {
  field: TeamYamlFieldSelector;
};


type TeamYamlGroupConnection_sumArgs = {
  field: TeamYamlFieldSelector;
};

type TeamYamlSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type DiscordPageQueryVariables = Exact<{ [key: string]: never; }>;


type DiscordPageQuery = { readonly homepage: { readonly nodes: ReadonlyArray<{ readonly frontmatter: { readonly followUsSection: { readonly socialMediaLinks: ReadonlyArray<{ readonly name: string | null, readonly url: string | null } | null> | null } | null } | null }> } };

type FooterSectionQueryVariables = Exact<{ [key: string]: never; }>;


type FooterSectionQuery = { readonly footer: { readonly nodes: ReadonlyArray<{ readonly frontmatter: { readonly columns: ReadonlyArray<{ readonly title: string | null, readonly links: ReadonlyArray<{ readonly text: string | null, readonly url: string | null, readonly newTab: boolean | null } | null> | null } | null> | null } | null }> } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type IndexPageQueryVariables = Exact<{ [key: string]: never; }>;


type IndexPageQuery = { readonly homepage: { readonly nodes: ReadonlyArray<{ readonly frontmatter: { readonly topBanner: { readonly text: string | null, readonly linkText: string | null, readonly url: string | null, readonly color: string | null } | null, readonly headerSection: { readonly dark: { readonly title: string | null, readonly subtitle: string | null } | null, readonly light: { readonly title: string | null, readonly subtitle: string | null } | null } | null, readonly introSection: { readonly title: string | null, readonly subtitle: string | null, readonly cards: ReadonlyArray<{ readonly title: string | null, readonly description: string | null, readonly image: { readonly publicURL: string | null } | null, readonly link: { readonly url: string | null, readonly newTab: boolean | null } | null } | null> | null } | null, readonly ecosystemSection: { readonly title: string | null, readonly subtitle: string | null, readonly subsections: ReadonlyArray<{ readonly title: string | null, readonly description: string | null, readonly image: { readonly publicURL: string | null } | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly url: string | null, readonly logo: { readonly publicURL: string | null } | null } | null> | null } | null> | null } | null, readonly technologySection: { readonly title: string | null, readonly subtitle: string | null, readonly blockFlowSection: { readonly title: string | null, readonly description: string | null, readonly links: ReadonlyArray<{ readonly text: string | null, readonly url: string | null, readonly newTab: boolean | null } | null> | null } | null, readonly smartContractSection: { readonly title: string | null, readonly description: string | null, readonly links: ReadonlyArray<{ readonly text: string | null, readonly url: string | null, readonly newTab: boolean | null } | null> | null } | null, readonly polwSection: { readonly title: string | null, readonly description: string | null, readonly links: ReadonlyArray<{ readonly text: string | null, readonly url: string | null, readonly newTab: boolean | null } | null> | null } | null, readonly vmsSection: { readonly title: string | null, readonly description: string | null, readonly links: ReadonlyArray<{ readonly text: string | null } | null> | null } | null } | null, readonly numbersSection: { readonly title: string | null, readonly subtitle: string | null } | null, readonly walletsSection: { readonly title: string | null, readonly subtitle: string | null, readonly description: string | null, readonly wallets: ReadonlyArray<{ readonly title: string | null, readonly description: string | null, readonly color: string | null, readonly screenshot: { readonly publicURL: string | null } | null, readonly actions: ReadonlyArray<{ readonly title: string | null, readonly link: string | null } | null> | null } | null> | null } | null, readonly milestonesSection: { readonly title: string | null, readonly subtitle: string | null, readonly timelines: ReadonlyArray<{ readonly title: string | null, readonly years: ReadonlyArray<{ readonly year: number | null, readonly entries: ReadonlyArray<{ readonly row: number | null, readonly text: string | null, readonly when: string | null, readonly content: ReadonlyArray<string | null> | null, readonly isMajor: boolean | null } | null> | null } | null> | null } | null> | null } | null, readonly todoListSection: { readonly title: string | null, readonly subtitle: string | null, readonly lists: ReadonlyArray<{ readonly title: string | null, readonly items: ReadonlyArray<{ readonly text: string | null, readonly description: string | null } | null> | null } | null> | null } | null, readonly shopSection: { readonly title: string | null, readonly subtitle: string | null, readonly description: string | null, readonly link: { readonly text: string | null, readonly url: string | null } | null } | null, readonly followUsSection: { readonly title: string | null, readonly subtitle: string | null, readonly description: string | null, readonly socialMediaLinks: ReadonlyArray<{ readonly name: string | null, readonly url: string | null } | null> | null } | null } | null }> } };

type NavigationMenuQueryVariables = Exact<{ [key: string]: never; }>;


type NavigationMenuQuery = { readonly navmenu: { readonly nodes: ReadonlyArray<{ readonly frontmatter: { readonly socialIcons: ReadonlyArray<string | null> | null, readonly menuItems: ReadonlyArray<{ readonly title: string | null, readonly items: ReadonlyArray<{ readonly title: string | null, readonly link: string | null } | null> | null } | null> | null } | null }> } };

type SocialsYamlQueryVariables = Exact<{ [key: string]: never; }>;


type SocialsYamlQuery = { readonly allSocialsYaml: { readonly edges: ReadonlyArray<{ readonly node: { readonly name: string | null, readonly url: string | null } }> } };


}
